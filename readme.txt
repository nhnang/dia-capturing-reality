////////////////////////////////////////////////////////////////////////////////
// TerraSfm解説
// バージョン：2018/08/16版
// Kiryu@ANGEWORK
// UTF-8:TAB-4:CR+LF
////////////////////////////////////////////////////////////////////////////////

■はじめに

これはCapturingRealitySDKで開発した「TerraSfm」プロジェクトの解説書です。

■起動方法

　Usage:
　TerraSfm.exe c:\input c:\output c:\param [-nocache]

　１番目の引数：必須
	元画像を配置するディレクトリを指定します。
　２番目の引数：必須
	出力ディレクトリを指定します。
　３番目の引数：必須
	詳細パラメータを配置するディレクトリを指定します。
　４番目の引数：オプション
　　ここに-nocacheを指定すると、キャッシュのindex管理と思われる以下のファイルを無視するようになります。

	component0.rcalign

　SDKがまだ未完成なのか、このファイルが残った状態で違うプロジェクトをロードすると失敗するケースがあるため、その対策です。

上記の例では、以下の３つのディレクトリを事前に準備しておく事になります。

　c:\input
　c:\output
　c:\param

引数注意点と制限事項：

　・オプション引数は、-nocacheを除き省略できません。
　・06/04版からディレクトリの末尾のバックスラッシュはあってもなくてもどちらでも動作するようになりました。
　・06/01版から画像サイズの指定は廃止となりました。先頭のファイルから幅高さを取得しSDKに入れ込みます。
　　対応している拡張子は、png/jpg/jpegです。SDKが受け付ける画像形式が不明のため、実績のあるファイルのみとしました。
　・outputの出力先に存在する同名ファイルは強制的に上書きされます。
　・失敗時はエラーコードがコンソールにのみ表示されます。

このディレクトリには４つのファイル配置が必要で、現在はファイル名が固定となっております。
上記サンプルでいうところのc:\paramの下には、以下のファイルを配置しなければなりません。

　・ControlPoints.txt
　・ControlPointNames.txt
　・MyMeasurementType.txt
　・ImageList.txt
　・EpsgList.txt
　・OrthoGps.txt

■ControlPoints.txt

GCP座標一覧です。
以下のような構成の行が並びます。

	 140462.593, 7068675.306999999, 103.1570000005886 

■ControlPointNames.txt

１行で指定します。名称をダブルクオーテーションで区切ってGCP数分並べます。

	"GCP0", "GCP1", "GCP2", "GCP3", "GCP4", "GCP5" 

■MyMeasurementType.txt

	struct MyMeasurementType
	{
	    UINT imageIndex;
	    UINT controlPointIndex;
	    double x;
	    double y;
	};

上記構造体の情報を１行として扱います。
以下のような構成の行が並びます。

	 13, 0, 164.36, 1104.80  

■ImageList.txt

画像ファイル名を列挙します。

	000.jpg
	001.jpg
	002.jpg
	003.jpg

ここはファイル名のみを書いてください。
ディレクトリはコマンドラインの引数を結合させますので不要です。
並べられたファイルの順番を、そのまま０オリジンの順番として扱います。
上記はサンプルのためたまたま連番ですが、法則性のないファイル名でも問題ありません。

■EpsgList.txt

必ず「１０」行で構成して下さい。
４行目まではOrthoExampleにハードコーディングされていたEPSG情報が入ります。

	SWEREF99 20 15
	2451
	GPS (WGS 84)
	+proj=longlat +datum=WGS84 +no_defs
	100.0
	100.0
	25.0
	1400
	1400
	100.0

２行目はepsgの標準文字列情報の番号を指定してください。
例として、以下のような情報を入れる必要があると仮定します。

　+proj=tmerc +lat_0=36 +lon_0=139.8333333333333 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs

これをこのファイルの中に直接書くのは面倒です。
SDKが受け付けてくれる文字としても調整が必要なため、自前で調整は現実的ではありません。
これを番号指定のみで内部で変換します。

＜具体的な指定方法＞

　上記の情報の本来の値をネットなど探すと、以下のようになっています。

　　# JGD2000 / Japan Plane Rectangular CS IX
　　<2451> +proj=tmerc +lat_0=36 +lon_0=139.8333333333333 +k=0.9999 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs  <>

　この中で、＃はコメントであり、この長い文字は不要です。
　２行目にある<2451>という文字列の数値のみである「2451」だけが必要となります。
　この2451をEpsgList.txtの２行目に記載すれば、内部で変換しCapureringReality SDKに渡す仕組みとなっています。

５行目から７行目はwhdの値を浮動小数点数で指定して下さい。
上記の例の中で以下の値が該当します。

	100.0
	100.0
	25.0

これはカメラ位置のXYZを示しているようで、Zが近すぎると処理そのものが失敗します。

８行目から１０行目までは、画像サイズと解像度を指定します。
上記の例の中で以下の値が該当します。

	1400
	1400
	100.0

1400とあるのは、最終的に出力されるOrtho画像の幅と高さです。
もともとのサンプルではこの値でしたが、SDKはこの解像度が調整可能になっています。
画像サイズは整数値で指定してください。
最後の値は、プロジェクション深度で、こちらは整数もしくは浮動小数点数で指定してください。

■OrthoGps.txt

WGS84系の緯度経度情報を外部から指定します。
実際のファイルの中身は以下のようになっています。

	20.0581695625
	63.7211447956
	97.4389834320173
	63.7220418742507
	63.7204966958123
	20.0596314452294
	20.0561460717712

これは前半３行と後半４行の２組構成となっています。
前半は、GPSの中心点XYZを指定してください。
後半は、GPSの東西南北を以下の順番で指定してください。

    north
    south
    east
    west

Zを除くデータは内部でDEG_TO_RADをかけてSDKに渡すという処理をしています。

---- 各オプションファイルの細かい注意点 ------

　・元々のソースがワイド文字指定のため、ディレクトリ指定等は英数字が無難です。
　	→現状、ファイルの中もユニコードは指定しないほうが良いと思われます。
　	→Windowsは１行に指定できる文字数に制限が存在しています。
　・擬似的なcsvになっていますが、行末のカンマは不要です。
　・半角空白は無視しますのでいくつ合っても問題はありません。
　・詳細オプションの構成に矛盾があるとクラッシュする可能性があります。（GCP数と名称数の相違等）
	→SDK内部で想定できないエラーとなる可能性もあり、今後対策を入れる予定です。
　・画像ファイル数の上限は暫定で2500個となっています。
	→超えた場合は強制終了又はクラッシュの可能性があります。

■既知の問題

　・稀にキャッシュファイルを消さないとエラーになる現象が確認できていますが、条件が完全に特定できていません。
	→component0.rcalign、_crTmp等がキャッシュのようです。-nocacheオプションを追加し暫定対応しています。
　・whdの３番目の数値が小さすぎると、デフォルトのサンプルでもply出力でエラーとなるようです。
	元々のサンプルではこうなっていました。
		100.0
		100.0
		25.0

■開発環境と実行における注意点

◆06/04版
　今回からWindows APIの関係でshlwap.dllが必要になりました。
　CR SDKと同じ系列であるWindows SDK v8.0を適用しています。

◆08/17版
　SDK側の共通ソースコードディレクトリの変名に伴い、Commonディレクトリがなくなりました。
　新しい名称はSampleCommonとなっており、以下のように配置して下さい。

　プロジェクトディレクトリ/
　+TerraSfm/
		.sln
		.h
		.cpp
		...
　+SampleCommon/
		.cpp
		...

　以前も同様でしたが、ビルドするためには本体プロジェクトと同列の位置に配置する必要があります。
　これはSDKのサンプルを踏襲している関係でこのようになっております。

　新規にモード切り替え機能を実装しました。
　OrthoExampleをベースに実装している事もありますが、以下の意図があります。
　・元々の状態からどう改編したのか？を判別しやすくすること
　・ワンタッチで切り替えて元の動作を可能にすること
　後者を切り替えるには、以下のマクロの有無で制御して下さい。

	define.h内
		#define		_ENABLE_CR_BASE_CODE_

　このマクロが存在している状態　→　OrthoExampleモードとして動作
　このマクロが存在しない状態　　→　TerraSfmモードとして動作

　後者はinputやparam等を取り込み、xyz等を拡張した状態です。
　プロジェクト内部はこのマクロのifdefで多々区切られており、OrthoExampleとDiffを取ることで修正箇所を簡単に確認可能です。
　なお、リポジトリ上ではTerraSfmモードでプッシュされています。

■SDK安定性の問題について

開発中に何度も安定しない問題に遭遇しています。
具体的には、エラーが発生するはずがない場所でエラー値が戻るという現象ですが、ばらつきがあり確実な再現性がありません。
Ply生成、UnlockModel、これらの場所でエラーが出た場合、以下の可能性があります。

・入力パラメータが間違っている
・OS内部に何かのSDKゴミが残っている？

これらを解決するには、何度か実行しなおしたりキャッシュを消す等といった対処が必要です。
長く計算が続く際には成功の確率がアップするという、理解し難い挙動をする場合もありますので何度も試すしかありません。
なお、既存のVisualStudioプロジェクトをコピーして一時的なテスト環境を作成する際も、VCをクリーンし環境を綺麗にしないと動かないという現象を確認しておりますので、そちらもご注意下さい。
